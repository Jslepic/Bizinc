//Section 1
//1. Coding Challenge
function transformArray(arr) {
  return arr.map(num => {
    // Check if the number is even
    if (num % 2 === 0) {
      // Double the even number
      return num * 2;
    } else {
      // Keep the odd number unchanged
      return num;
    }
  });
}
//2. Conceptual Question
//The == operator compares the values of two variables after performing type conversion if necessary. 
//On the other hand, the === operator compares the values of two variables without performing type conversion. 

//Section 2
//1. Coding Challenge
import React, { useState } from 'react';

function Counter() {
  // Initialize state with useState hook
  const [count, setCount] = useState(0);

  // Function to increment the counter
  const increment = () => {
    setCount(prevCount => prevCount + 1);
  };

  // Function to decrement the counter
  const decrement = () => {
    setCount(prevCount => prevCount - 1);
  };

  return (
    <div style={{ textAlign: 'center', marginTop: '20px' }}>
      <h1>Counter</h1>
      <p style={{ fontSize: '24px' }}>Current Count: {count}</p>
      <button 
        onClick={increment} 
        style={{ margin: '5px', padding: '10px 20px', fontSize: '16px' }}
      >
        Increment
      </button>
      <button 
        onClick={decrement} 
        style={{ margin: '5px', padding: '10px 20px', fontSize: '16px' }}
      >
        Decrement
      </button>
    </div>
  );
}

export default Counter;
//2.  Conceptual Question
//The useEffect hook in React is used to perform side effects in function components. 
//Side effects are operations that can interact with the outside world or have some impact outside the component itself.
//You use useEffect hook when you want to fetch user data from an API when a component mounts and display it.


//Section 3
//1. Coding Challenge
const express = require('express');
const app = express();
const port = 3000;

// Define the endpoint
app.get('/message', (req, res) => {
  res.json({ message: 'Hello, World!' });
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
//2.  Conceptual Question
//Node.js handles asynchronous operations through event loops, callback functions, promises and async/await, worker threads and libraries.
//The benefits of asynchronous handling in Node.js is non-blocking I/O, scalability, responsiveness, and efficient resource utilization.

//Section 4
//1. Coding Challenge
import fs from 'fs';
import path from 'path';

export async function getStaticProps() {
  // Define the path to the JSON file
  const filePath = path.join(process.cwd(), 'data', 'items.json');

  // Read the file contents
  const fileContents = fs.readFileSync(filePath, 'utf8');

  // Parse the JSON data
  const items = JSON.parse(fileContents);

  // Return the data as props
  return {
    props: {
      items,
    },
  };
}

const ItemsPage = ({ items }) => {
  return (
    <div>
      <h1>Items List</h1>
      <ul>
        {items.map(item => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default ItemsPage;
//2.  Conceptual Question
//In Next.js, both getStaticProps and getServerSideProps are data-fetching methods used to fetch data and pass it to a page component. 
//However, getStaticProps is used for pages that can be pre-rendered at build time, and getServerSideProps is used for pages that need real-time data on every request.

//Section 5
//1. Coding Challenge
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE
);
INSERT INTO users (name, email) 
VALUES ('John Doe', 'john.doe@example.com');
SELECT * FROM users;
//2.  Conceptual Question
//In PostgreSQL, a primary key is a specific column or set of columns that uniquely identifies each row in a table.
//A primary key is crucial in PostgreSQL for ensuring the uniqueness and integrity of data in a table, 
//optimizing query performance, and supporting relational database design through the use of foreign keys.

//Section 6
//1. Conceptual Question

//Section 7
//1. Coding Challenge
// Function to handle the [greeting] shortcode
function greeting_shortcode() {
    return 'Welcome to My Site!';
}

// Register the shortcode with WordPress
function register_greeting_shortcode() {
    add_shortcode('greeting', 'greeting_shortcode');
}

// Hook the register function into the 'init' action
add_action('init', 'register_greeting_shortcode');

